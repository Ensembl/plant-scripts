#!/usr/bin/env perl

# Loads a TSV file, as those generated by extract_OMCL_synonyms.pl,
# in order to load gene synonyms matching a gene.stable_id
#
# adapted from eg-pipelines/scripts/xrefs_pipeline/load_sgd_gene_names.pl
# Bruno Contreras 2019

use strict;
use warnings;
use Readonly;

use Bio::EnsEMBL::Registry;
use Bio::EnsEMBL::DBSQL::DBAdaptor;
use Bio::EnsEMBL::DBEntry;
use Bio::EnsEMBL::Utils::CliHelper;

use Carp;
use Data::Dumper;
use Log::Log4perl qw(:easy);

# forbidden words in synonyms
# add more as required
my @BAD_ANNOT = qw( unknown predicted ); 

my $logger = get_logger();

my $cli_helper = Bio::EnsEMBL::Utils::CliHelper->new();

my $optsd = [ @{ $cli_helper->get_dba_opts() } ];
push( @{$optsd}, "file:s" );
push( @{$optsd}, "verbose" );
push( @{$optsd}, "extdb:s" );

my $opts = $cli_helper->process_args( $optsd, \&pod2usage );

if( !$opts->{'file'} ){
  die "# need -file synonyms.tsv\n";
}

if( !$opts->{'extdb'} ){
  die "# need -extdb arg, example -extdb EntrezGene\n";
}

if( $opts->{'verbose'} ) {
  Log::Log4perl->easy_init($DEBUG);
}
else {
  Log::Log4perl->easy_init($INFO);
}

## 1) connect to core db in indicated server
$logger->info( "Loading " . $opts->{'dbname'} );
my $dba = Bio::EnsEMBL::DBSQL::DBAdaptor->new(
                     -USER   => $opts->{'user'},
                     -PASS   => $opts->{'pass'},
                     -HOST   => $opts->{'host'},
                     -PORT   => $opts->{'port'},
                     -DBNAME => $opts->{'dbname'} );


my $gene_adaptor = $dba->get_GeneAdaptor;
my $dea = $dba->get_DBEntryAdaptor;

## 2) read TSV file with synonyms
my $file = $opts->{'file'};

my ($stableid, $acc, $synonym, $word);
my (%syns);

open(TSV,'<',$file) || die "#ERROR: cannot read $file: $!";

LINE: while ( my $line = <TSV> ) {

    #TraesCS2D02G313000  AQY14665.1  FKBP53a-2DL
    #TraesCS7B02G232700  AHJ14572.1  spermidine synthase

    next if($line =~ m/^#/ || $line !~ m/\t/);

    chomp($line); 
    ($stableid, $acc, $synonym) = split(/\t/, $line);

    # skip synonyms with forbidded/bad words
    foreach $word (@BAD_ANNOT){	        
        if($synonym =~ m/$word/i) {
            $logger->info( "# skip $acc $synonym");        
    	    next LINE;
        }
    }

    # accumulate synonyms of the same stable_id
    $syns{$stableid}{$acc} = $synonym;
}
close(TSV);

## 3) create display_xrefs linked to synonyms

my $n_of_xrefs = 0;
foreach $stableid (keys(%syns)) {
   
    # check target gene exists 
    my $gene = $gene_adaptor->fetch_by_stable_id($stableid);
    if ( !$gene ) {
        $logger->info( "# cannot find $stableid, skip it");
        next;
    }
 	
    # check whether gene already has display_xref  
    my $old_display_xref = $gene->display_xref();
    if( $old_display_xref ) {
        $logger->info( "# $stableid has display_xref_id set, skip it");
    }

    # make a list with all synonyms
    my @syn_accs = keys(%{$syns{$stableid}});

    # create a new display_xref from acc of 1st synonym
    my $new_display_xref = Bio::EnsEMBL::DBEntry -> new (
                -PRIMARY_ID  => $syn_accs[0],
                -DBNAME      => $opts->{'extdb'},
                -INFO_TYPE   => 'SEQUENCE_MATCH',
    );
    
    # add all synonyms
    my %seen; 
    foreach my $sacc (0 .. $#syn_accs) {
	
        # add unique string synonym
        $word = $syns{$stableid}{ $syn_accs[$sacc] };
        if(!$seen{$word}){
            $new_display_xref->add_synonym( $syns{$stableid}{ $syn_accs[$sacc] } );
            $logger->info( "# adding $stableid : $syns{$stableid}{ $syn_accs[$sacc] }");
	    $seen{ $word }++;	
        }

        # add synonym accessions, should be all different
        $new_display_xref->add_synonym( $syn_accs[$sacc] );
        $logger->info( "# adding $stableid : $syn_accs[$sacc] ");
    }        

    # will complain if external db does not exist
    my $dbRef = $dea->_check_external_db($new_display_xref,1);
    my $xref_id = $dea->_store_or_fetch_xref($new_display_xref,$dbRef);
    $new_display_xref->dbID($xref_id);
           
    # finally update this gene
    $gene->display_xref($new_display_xref);
    $gene_adaptor->update($gene);
    

    $n_of_xrefs++;
}

print "# added $n_of_xrefs display_xrefs\n";
